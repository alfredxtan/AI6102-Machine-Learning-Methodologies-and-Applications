{"cells":[{"cell_type":"code","execution_count":6,"metadata":{"id":"yBWFVFq99UQs","executionInfo":{"status":"ok","timestamp":1709189064160,"user_tz":-480,"elapsed":417,"user":{"displayName":"Alfred Tan","userId":"12418543825992472900"}}},"outputs":[],"source":["#Import relevant libraries\n","import numpy as np\n","from sklearn.datasets import load_svmlight_file\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.model_selection import KFold, GridSearchCV\n","from sklearn import svm\n","from sklearn.metrics import accuracy_score"]},{"cell_type":"code","execution_count":9,"metadata":{"id":"ZTDHYzlG9gxy","executionInfo":{"status":"ok","timestamp":1709189088594,"user_tz":-480,"elapsed":1549,"user":{"displayName":"Alfred Tan","userId":"12418543825992472900"}}},"outputs":[],"source":["#Read data\n","X, y = load_svmlight_file('./a9a.txt')  #Training set\n","X_test, y_test = load_svmlight_file('./a9a.t')  #Test set\n","\n","#Perform K-fold Validation, K=3\n","kf = KFold(n_splits = 3, shuffle = True, random_state = 2205)\n","\n","standard_scaler = StandardScaler()\n","X = standard_scaler.fit_transform(X.toarray())\n","\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":106},"executionInfo":{"elapsed":317,"status":"error","timestamp":1708533841964,"user":{"displayName":"Alfred Tan","userId":"12418543825992472900"},"user_tz":-480},"id":"HK88ARpbA1iF","outputId":"349f7728-4e4e-4571-d30d-c15cad415c2a"},"outputs":[{"ename":"SyntaxError","evalue":"invalid syntax (<ipython-input-4-302d9fde15ec>, line 3)","output_type":"error","traceback":["\u001b[0;36m  File \u001b[0;32m\"<ipython-input-4-302d9fde15ec>\"\u001b[0;36m, line \u001b[0;32m3\u001b[0m\n\u001b[0;31m    X0_test.append([:,122])\u001b[0m\n\u001b[0m                    ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"]}],"source":["X0 = X.toarray()\n","X0_test = X_test.toarray()\n","X0_test.append([:,122])\n","\n","\n","print(X0.shape, X0_test.shape)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":427,"status":"ok","timestamp":1708525615685,"user":{"displayName":"Alfred Tan","userId":"12418543825992472900"},"user_tz":-480},"id":"OeCmoQVmCrfM","outputId":"99d1dfa9-71b1-4d38-d334-e6205414edac"},"outputs":[{"name":"stdout","output_type":"stream","text":["(array([19609]),)\n"]}],"source":["X0 = np.array(X0)\n","\n","print(np.where(X0[:,122]==1))"]},{"cell_type":"code","execution_count":3,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":373},"id":"gsIxRGmm93xD","outputId":"ab42bb8e-f930-4896-e932-879757a4e0d8","executionInfo":{"status":"error","timestamp":1709188136669,"user_tz":-480,"elapsed":328311,"user":{"displayName":"Alfred Tan","userId":"12418543825992472900"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["Fitting 3 folds for each of 25 candidates, totalling 75 fits\n"]},{"output_type":"error","ename":"KeyboardInterrupt","evalue":"","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-3-d4bbff5feea5>\u001b[0m in \u001b[0;36m<cell line: 4>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0msvm_rbf\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mGridSearchCV\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msvm\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mSVC\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mparams_rbf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mscoring\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m'accuracy'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mn_jobs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrefit\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcv\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mkf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mverbose\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m3\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0msvm_rbf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0msvm_rbf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcv_results_\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_search.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y, groups, **fit_params)\u001b[0m\n\u001b[1;32m    872\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mresults\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    873\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 874\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_run_search\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mevaluate_candidates\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    875\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    876\u001b[0m             \u001b[0;31m# multimetric is determined here because in the case of a callable\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_search.py\u001b[0m in \u001b[0;36m_run_search\u001b[0;34m(self, evaluate_candidates)\u001b[0m\n\u001b[1;32m   1386\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_run_search\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mevaluate_candidates\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1387\u001b[0m         \u001b[0;34m\"\"\"Search all candidates in param_grid\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1388\u001b[0;31m         \u001b[0mevaluate_candidates\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mParameterGrid\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mparam_grid\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1389\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1390\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_search.py\u001b[0m in \u001b[0;36mevaluate_candidates\u001b[0;34m(candidate_params, cv, more_results)\u001b[0m\n\u001b[1;32m    819\u001b[0m                     )\n\u001b[1;32m    820\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 821\u001b[0;31m                 out = parallel(\n\u001b[0m\u001b[1;32m    822\u001b[0m                     delayed(_fit_and_score)(\n\u001b[1;32m    823\u001b[0m                         \u001b[0mclone\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbase_estimator\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/utils/parallel.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, iterable)\u001b[0m\n\u001b[1;32m     61\u001b[0m             \u001b[0;32mfor\u001b[0m \u001b[0mdelayed_func\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m \u001b[0;32min\u001b[0m \u001b[0miterable\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     62\u001b[0m         )\n\u001b[0;32m---> 63\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0msuper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__call__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miterable_with_config\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     64\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     65\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/joblib/parallel.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, iterable)\u001b[0m\n\u001b[1;32m   1950\u001b[0m         \u001b[0mnext\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0moutput\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1951\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1952\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0moutput\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreturn_generator\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0moutput\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1953\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1954\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__repr__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/joblib/parallel.py\u001b[0m in \u001b[0;36m_get_outputs\u001b[0;34m(self, iterator, pre_dispatch)\u001b[0m\n\u001b[1;32m   1593\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1594\u001b[0m             \u001b[0;32mwith\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_backend\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mretrieval_context\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1595\u001b[0;31m                 \u001b[0;32myield\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_retrieve\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1596\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1597\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mGeneratorExit\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/joblib/parallel.py\u001b[0m in \u001b[0;36m_retrieve\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   1705\u001b[0m                 (self._jobs[0].get_status(\n\u001b[1;32m   1706\u001b[0m                     timeout=self.timeout) == TASK_PENDING)):\n\u001b[0;32m-> 1707\u001b[0;31m                 \u001b[0mtime\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msleep\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0.01\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1708\u001b[0m                 \u001b[0;32mcontinue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1709\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}],"source":["params_rbf = {'C': [0.01, 0.05, 0.1, 0.5, 1], 'kernel': ['linear'], 'gamma':[0.01, 0.05, 0.1, 0.5, 1]}\n","\n","svm_rbf = GridSearchCV(svm.SVC(), params_rbf, scoring = ['accuracy'], n_jobs = -1, refit=False, cv=kf, verbose=3)\n","svm_rbf.fit(X,y)\n","\n","svm_rbf.cv_results_"]},{"cell_type":"code","execution_count":10,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":990235,"status":"ok","timestamp":1709190085865,"user":{"displayName":"Alfred Tan","userId":"12418543825992472900"},"user_tz":-480},"id":"_Bxf3hqfUoBo","outputId":"cc2f41c0-4957-4dca-a199-c540a984ea38"},"outputs":[{"output_type":"stream","name":"stdout","text":["Fitting 3 folds for each of 5 candidates, totalling 15 fits\n","[CV 1/3] END ...C=0.01, kernel=linear; accuracy: (test=0.849) total time=  37.4s\n","[CV 2/3] END ...C=0.01, kernel=linear; accuracy: (test=0.849) total time=  38.9s\n","[CV 3/3] END ...C=0.01, kernel=linear; accuracy: (test=0.844) total time=  36.5s\n","[CV 1/3] END ...C=0.05, kernel=linear; accuracy: (test=0.849) total time=  39.4s\n","[CV 2/3] END ...C=0.05, kernel=linear; accuracy: (test=0.849) total time=  39.4s\n","[CV 3/3] END ...C=0.05, kernel=linear; accuracy: (test=0.844) total time=  37.6s\n","[CV 1/3] END ....C=0.1, kernel=linear; accuracy: (test=0.850) total time=  46.2s\n","[CV 2/3] END ....C=0.1, kernel=linear; accuracy: (test=0.849) total time=  48.9s\n","[CV 3/3] END ....C=0.1, kernel=linear; accuracy: (test=0.844) total time=  46.0s\n","[CV 1/3] END ....C=0.5, kernel=linear; accuracy: (test=0.850) total time= 1.4min\n","[CV 2/3] END ....C=0.5, kernel=linear; accuracy: (test=0.849) total time= 1.4min\n","[CV 3/3] END ....C=0.5, kernel=linear; accuracy: (test=0.843) total time= 1.3min\n","[CV 1/3] END ......C=1, kernel=linear; accuracy: (test=0.849) total time= 2.1min\n","[CV 2/3] END ......C=1, kernel=linear; accuracy: (test=0.849) total time= 2.0min\n","[CV 3/3] END ......C=1, kernel=linear; accuracy: (test=0.843) total time= 2.1min\n"]},{"output_type":"execute_result","data":{"text/plain":["{'mean_fit_time': array([ 31.32003482,  33.59020575,  42.09223406,  77.53820078,\n","        118.82009053]),\n"," 'std_fit_time': array([1.26899957, 0.53754889, 1.30430667, 1.0866832 , 2.25972873]),\n"," 'mean_score_time': array([6.27308075, 5.19756381, 4.94153221, 5.4240005 , 4.73251088]),\n"," 'std_score_time': array([0.24390514, 0.47718123, 0.00665559, 0.36276172, 0.13941373]),\n"," 'param_C': masked_array(data=[0.01, 0.05, 0.1, 0.5, 1],\n","              mask=[False, False, False, False, False],\n","        fill_value='?',\n","             dtype=object),\n"," 'param_kernel': masked_array(data=['linear', 'linear', 'linear', 'linear', 'linear'],\n","              mask=[False, False, False, False, False],\n","        fill_value='?',\n","             dtype=object),\n"," 'params': [{'C': 0.01, 'kernel': 'linear'},\n","  {'C': 0.05, 'kernel': 'linear'},\n","  {'C': 0.1, 'kernel': 'linear'},\n","  {'C': 0.5, 'kernel': 'linear'},\n","  {'C': 1, 'kernel': 'linear'}],\n"," 'split0_test_accuracy': array([0.84918003, 0.84899576, 0.84954855, 0.84954855, 0.84945642]),\n"," 'split1_test_accuracy': array([0.84862723, 0.8488115 , 0.8488115 , 0.84899576, 0.84899576]),\n"," 'split2_test_accuracy': array([0.84391413, 0.84372984, 0.8436377 , 0.84336128, 0.84336128]),\n"," 'mean_test_accuracy': array([0.84724046, 0.84717903, 0.84733259, 0.84730187, 0.84727116]),\n"," 'std_test_accuracy': array([0.00236288, 0.00244011, 0.00262995, 0.00279554, 0.00277109]),\n"," 'rank_test_accuracy': array([4, 5, 1, 2, 3], dtype=int32)}"]},"metadata":{},"execution_count":10}],"source":["params_linear = {'C': [0.01, 0.05, 0.1, 0.5, 1], 'kernel': ['linear']}\n","\n","svm_linear = GridSearchCV(svm.SVC(), params_linear, scoring = ['accuracy'], n_jobs = -2, refit=False, cv=kf, verbose=3)\n","svm_linear.fit(X,y)\n","\n","svm_linear.cv_results_\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":21335,"status":"ok","timestamp":1708534598350,"user":{"displayName":"Alfred Tan","userId":"12418543825992472900"},"user_tz":-480},"id":"MZxNesCBBMcG","outputId":"9d0c336d-151f-4add-9312-38c2cf931766"},"outputs":[{"name":"stdout","output_type":"stream","text":["The accuracy on the test set is 0.8497635280388183\n"]}],"source":["#Train final SVM on entire training set\n","params_final = {'C': 1, 'kernel': 'linear'}\n","svm_final = svm.SVC(**params_final)\n","svm_final.fit(X,y)\n","\n","#Append zero column because feature 123 is 0 for all test data\n","X_test = np.array(X_test)\n","zeros_column = np.array([0] * X_test.shape[0])\n","X_test = np.hstack((X_test, zeros_column[:,np.newaxis]))\n","\n","#Calculate accuracy\n","y_pred = svm_final.predict(X_test)\n","print(f\"The accuracy on the test set is {accuracy_score(y_test, y_pred)}\")"]}],"metadata":{"colab":{"provenance":[],"gpuType":"T4","authorship_tag":"ABX9TyPAC3CLJ2QxIc5Z21e6/aOF"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"},"accelerator":"GPU"},"nbformat":4,"nbformat_minor":0}